#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define QUICK_TAP_MS 175

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/42.h"

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 19 20 21 22  // Left-hand keys.
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 16 15 14 13  // Right-hand keys.
#define THUMBS 36 37 38 39 40  // Thumb keys.
#define BASE 0
#define GAME 1
#define NAV  2
#define DIG  3
#define SYS  4
#define MOUSE  5
#define SCROLL 6
#define SNIPE 7

&sk {
    release-after-ms = <900>;  // release after 0.9s
    quick-release;             // no double capitalization when rolling keys
};

&sl {
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&mt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/ {
    behaviors {
        hm_right: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 19 20 21 22 36 37 38 39 40>;
        };

        hm_left: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 16 15 14 13 36 37 38 39 40>;
        };

        hm_right_layer: homerow_mod_right_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 19 20 21 22 36 37 38 39 40>;
        };

        hm_left_layer: homerow_mod_left_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 16 15 14 13 36 37 38 39 40>;
        };

        comment_or: comment_or {
            compatible = "zmk,behavior-hold-tap";
            label = "slash_or_comm";
            bindings = <&comment>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        all_quotes: all_quotes {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt GRAVE SQT>, <&kp DOUBLE_QUOTES>;
        };

        space_or_super: space_or_super {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            bindings = <&super>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        caps_lock {
            bindings = <&caps_word>;
            key-positions = <14 15 16>;
            timeout-ms = <100>;
            require-prior-idle-ms = <150>;
        };
    };

    macros {
        /**
       * Temporarily switches to a layer (`&mo`) while a modifier is held.
       * Analogous to QMK's `LM()`, using a parameterized macro.
       *
       * Params:
       *  1. Layer to switch to
       *  2. Modifier to press while layer is active
       *
       * Example:
       *  `&lm NUM_LAYER LSHIFT`
       */

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        press_two_keys: press_two_keys {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>;
        };

        super: super {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_press>,
                <&kp LALT>,
                <&macro_press>,
                <&kp LCTL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_release>,
                <&kp LALT>,
                <&macro_release>,
                <&kp LCTL>;
        };

        more_or_equal: more_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "MORE_OR_EQUAL";
        };

        less_or_equal: less_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "LESS_OR_EQUAL";
        };

        fun_arrow_right: fun_arrow_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "FUN_ARROW_RIGHT";
        };

        comment: comment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp STAR>;
            label = "MACROS_COMMENT";
        };
    };

    /omit-if-no-ref/

    zip_temp_layer: zip_temp_layer {
        compatible = "zmk,input-processor-temp-layer";
        #input-processor-cells = <2>;
        require-prior-idle-ms = <1000>;
    };

    /omit-if-no-ref/

    vertical_scroll_mapper: vertical_scroll_mapper {
        compatible = "zmk,input-processor-code-mapper";
        #input-processor-cells = <0>;
        type = <INPUT_EV_REL>;
        map = <INPUT_REL_Y INPUT_REL_WHEEL>;
    };

    trackball_listener {
        compatible = "zmk,input-listener";
        device = <&vtrackball>;

        // scaler: first is multiplier, second one is divider.
        // temp layer: first argument is layer, second is time in ms

        input-processors = <&zip_xy_scaler 1 6>, <&zip_temp_layer MOUSE 1000>;

        snipe {
            layers = <SNIPE>;
            input-processors = <&zip_xy_scaler 1 18>;
        };

        scroll {
            layers = <SCROLL>;

            // scaler: first is multiplier, second one is divider.

            input-processors =
                <&zip_y_scaler 1 9999>,
                <&zip_xy_to_scroll_mapper>,
                <&zip_scroll_scaler 1 72>;
        };
    };

    /*                                      42 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────────┬────────────────────────╮ ╭─────────────────────────┬─────────────────────────╮
  │  0   1   2   3   4   5 │  6   7   8   9  10  11 │ │ LT5 LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 RT5 │
  │ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │ │ LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5 │
  │ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │ │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
  ╰───────────╮ 36  37  38 │ 39  40  41 ╭───────────╯ ╰───────────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────────╯
              ╰────────────┴────────────╯                         ╰─────────────┴─────────────╯             */

    keymap {
        compatible = "zmk,keymap";

        BASE {
            label = "Base";
            bindings = <
&lt 5 ESC         &kp Q             &kp W                &kp F             &kp P                    &kp B          &kp J        &kp L                  &kp U              &kp Y                  &kp SQT            &lt 5 BACKSLASH
&lt 4 TAB         &hm_left LCTRL A  &hm_left LEFT_ALT R  &hm_left LSHFT S  &hm_left LEFT_COMMAND T  &kp G          &kp M        &hm_right RIGHT_GUI N  &hm_right RSHFT E  &hm_right RIGHT_ALT I  &hm_right RCTRL O  &all_quotes
&kp LEFT_CONTROL  &kp Z             &kp X                &kp C             &kp D                    &kp V          &kp K        &kp H                  &kp COMMA          &kp PERIOD             &kp SLASH          &kp ENTER
                                                         &kp LEFT_SHIFT    &lt 2 BACKSPACE          &lt 3 ENTER    &lt 3 ENTER  &lt 2 SPACE
            >;
        };

        GAME {
            label = "Game";
            bindings = <
&lt 5 ESC  &kp I           &kp Q  &kp W             &kp E      &kp R    &trans     &trans   &trans  &trans  &trans  &trans
&lt 4 TAB  &kp LEFT_SHIFT  &kp A  &kp S             &kp D      &kp F    &trans     &trans   &trans  &trans  &trans  &trans
&kp LCTRL  &kp Z           &kp X  &kp C             &kp M      &kp V    &trans     &trans   &trans  &trans  &trans  &trans
                                  &sk LEFT_COMMAND  &kp SPACE  &mo 3    &lt 4 ESC  &kp RET
            >;
        };

        NAV {
            label = "Navigation";
            bindings = <
&kp ESC    &kp TAB    &kp BSPC  &kp UP_ARROW  &kp DEL                      &kp LBKT                &kp RBKT               &kp GRAVE       &kp PLUS       &kp PIPE          &kp COLON     &kp PIPE
&kp TAB    &kp LSHFT  &kp LEFT  &kp DOWN      &kp RIGHT                    &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp MINUS       &kp EQUAL      &kp BSLH          &kp SEMI      &kp DOUBLE_QUOTES
&kp LCTRL  &kp LGUI   &kp X     &kp HOME      &kp END                      &kp LEFT_BRACE          &kp RIGHT_BRACE        &kp UNDERSCORE  &kp LESS_THAN  &kp GREATER_THAN  &kp QUESTION  &kp RET
                                &trans        &space_or_super SPACE SPACE  &trans                  &trans                 &trans
            >;
        };

        NUM {
            label = "numbers";
            bindings = <
&trans   &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans   &kp N1           &kp N2       &kp N3    &kp N4      &kp N5         &kp N6     &kp N7         &kp N8        &kp N9                &kp N0                 &trans
&kp F12  &kp F1           &kp F2       &kp F3    &kp F4      &kp F5         &kp F6     &kp F7         &kp F8        &kp F9                &kp F10                &kp F11
                                       &trans    &trans      &trans         &trans     &kp N0
            >;
        };

        SYS {
            label = "System";
            bindings = <
&trans  &trans  &kp C_VOLUME_DOWN  &kp C_MUTE    &kp C_VOLUME_UP  &kp C_BRI_UP    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&trans  &trans  &kp C_PREV         &kp C_PP      &kp C_NEXT       &kp C_BRI_DN    &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans             &out OUT_TOG  &trans           &trans          &trans        &trans        &trans        &trans        &trans        &studio_unlock
                                   &trans        &trans           &trans          &trans        &trans
            >;
        };

        CFG {
            bindings = <
&trans       &to 0   &to 1   &trans  &trans  &studio_unlock    &studio_unlock  &trans  &trans  &trans  &trans  &trans
&trans       &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans
&bootloader  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &bootloader
                             &trans  &trans  &trans            &trans          &trans
            >;

            label = "Config";
        };

        AUTO-MOUSE {
            label = "Mouse";
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &mo 8   &mkp MCLK  &mkp RCLK  &mkp LCLK  &trans       &trans  &trans  &trans  &trans  &trans  &trans
                           &mkp MCLK  &mkp LCLK  &mkp RCLK    &trans  &trans
            >;
        };

        SCROLL {
            label = "Scroll";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        SNIPE {
            label = "Snipe";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
